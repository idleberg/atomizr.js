// https://github.com/idleberg/atom-atomizr/blob/v0.22.0/lib/includes/sublime-text.coffee
// ---
// generated by coffee-script 1.9.2

const xmlJs = require('xml-js');
const parseJson = require('parse-json');

module.exports = {
    read_json: function(input, ignoreTabSeparator = false) {
        let data, output;

        // Validate JSON
        try {
            data = parseJson(input);
        } catch (error) {
            throw error;
        }

        // Minimum requirements
        if (!((data.scope != null) || (data.completions != null))) {
            return console.warn('This doesn\'t seem to be a valid Sublime Text completions file. Aborting.');
        }
        
        // Conversion
        output = {};
        output.scope = data.scope;
        output.completions = [];

        let i = 0;
        let ref = data.completions;

        for (let k in ref) {
            let v = ref[k];

            if (v.trigger != null) {
                let description, trigger;

                // Split tab-separated description
                if (!(v.trigger.indexOf('\t') === -1 || ignoreTabSeparator === true)) {
                    let tabs = v.trigger.split('\t');
                    if (tabs.length > 2) {
                        console.warn('Conversion aborted, trigger "' + v.trigger + '" contains multiple tabs');
                    }
                    trigger = tabs[0];
                    description = tabs.slice(-1).pop();
                } else {
                    trigger = v.trigger;
                    description = null;
                }
                if (description != null) {
                    output.completions[i] = {
                        description: description,
                        trigger: trigger,
                        contents: v.contents
                    };
                } else {
                    output.completions[i] = {
                        trigger: trigger,
                        contents: v.contents
                    };
                }
                i++;
            }
        }
        return output;
    },

    read_xml: function(input) {
        let data, output;

        // Validate XML
        try {
            data = xmlJs.xml2js(input, {
                spaces: 4,
                compact: true
            });
        } catch (error) {
            throw error;
        }

        // Minimum requirements
        if (!((data.snippet.scope != null) || (data.snippet.content._cdata != null))) {
            return console.warn('This doesn\'t seem to be a valid Sublime Text snippet file. Aborting.');
        }
        
        // Get scope, convert if necessary
        output = {};
        output.scope = data.snippet.scope['_text'];

        let description, trigger, contents;

        if (data.snippet.description) {
            description = data.snippet.description['_text'];
        }
        trigger = data.snippet.tabTrigger['_text'];
        contents = data.snippet.content._cdata.trim();
        if (description) {
            output.completions = [
                {
                    description: description,
                    trigger: trigger,
                    contents: contents
                }
            ];
        } else {
            output.completions = [
                {
                    trigger: trigger,
                    contents: contents
                }
            ];
        }
        return output;
    },

    write_json: function(input) {
        let completions = [];
        let i = 0;
        let ref = input.completions;
        for (let j = 0, len = ref.length; j < len; j++) {
            let item = ref[j];
            let contents = item.contents;
            let trigger;
            if (item.description) {
                trigger = item.trigger + '\t' + item.description;
            } else {
                trigger = item.trigger;
            }
            completions[i] = {
                contents: contents,
                trigger: trigger
            };
            i++;
        }
        let data = {
            '#': 'Generated with Atomizr â€“ https://www.npmjs.com/package/atomizr',
            scope: input.scope,
            completions: completions
        };
        let output;
        try {
            output = JSON.stringify(data, null, 4);
        } catch (error) {
            throw error;
        }
        return output;
    },

    write_xml: function(input) {
        var obj, output;
        if (input.completions[0].description) {
            obj = {
                _comment: ' ' + this.meta + ' ',
                snippet: {
                    content: {
                        _cdata: input.completions[0].contents
                    },
                    tabTrigger: {
                        _text: input.completions[0].trigger
                    },
                    description: {
                        _text: input.completions[0].description
                    },
                    scope: {
                        _text: input.scope
                    }
                }
            };
        } else {
            obj = {
                _comment: ' ' + this.meta + ' ',
                snippet: {
                    content: {
                        _cdata: input.completions[0].contents
                    },
                    tabTrigger: {
                        _text: input.completions[0].trigger
                    },
                    scope: {
                        _text: input.scope
                    }
                }
            };
        }
        output = xmlJs.js2xml(obj, {
            compact: true,
            spaces: 4
        });
        return output;
    }
};
